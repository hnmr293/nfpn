import unittest
import numpy
import torch
from nfpn.convert import to_hf8x, hf8x_to_fp16, HF8X_MAX

def is_subnormal(v):
    return v < 2 ** -14

def as_fp16(vi: int):
    vf = numpy.array([vi], dtype=numpy.uint16).view(numpy.float16)[0]
    return vf

class TestToHf8(unittest.TestCase):
    
    def test_normal_fp16(self):
        xs = [
            # exp  value            fp16                   hf8x (expected)
            (0,    2 ** (0),        0b0_01111_0000000000,  0b0_1111_000),
            (-1,   2 ** (-1),       0b0_01110_0000000000,  0b0_1110_000),
            (-2,   2 ** (-2),       0b0_01101_0000000000,  0b0_1101_000),
            (-3,   2 ** (-3),       0b0_01100_0000000000,  0b0_1100_000),
            (-4,   2 ** (-4),       0b0_01011_0000000000,  0b0_1011_000),
            (-5,   2 ** (-5),       0b0_01010_0000000000,  0b0_1010_000),
            (-6,   2 ** (-6),       0b0_01001_0000000000,  0b0_1001_000),
            (-7,   2 ** (-7),       0b0_01000_0000000000,  0b0_1000_000),
            (-8,   2 ** (-8),       0b0_00111_0000000000,  0b0_0111_000),
            (-9,   2 ** (-9),       0b0_00110_0000000000,  0b0_0110_000),
            (-10,  2 ** (-10),      0b0_00101_0000000000,  0b0_0101_000),
            (-11,  2 ** (-11),      0b0_00100_0000000000,  0b0_0100_000),
            (-12,  2 ** (-12),      0b0_00011_0000000000,  0b0_0011_000),
            (-13,  2 ** (-13),      0b0_00010_0000000000,  0b0_0010_000),
            (-14,  2 ** (-14),      0b0_00001_0000000000,  0b0_0001_000),
            (0,    -(2 ** (0)),     0b1_01111_0000000000,  0b1_1111_000),
            (-1,   -(2 ** (-1)),    0b1_01110_0000000000,  0b1_1110_000),
            (-2,   -(2 ** (-2)),    0b1_01101_0000000000,  0b1_1101_000),
            (-3,   -(2 ** (-3)),    0b1_01100_0000000000,  0b1_1100_000),
            (-4,   -(2 ** (-4)),    0b1_01011_0000000000,  0b1_1011_000),
            (-5,   -(2 ** (-5)),    0b1_01010_0000000000,  0b1_1010_000),
            (-6,   -(2 ** (-6)),    0b1_01001_0000000000,  0b1_1001_000),
            (-7,   -(2 ** (-7)),    0b1_01000_0000000000,  0b1_1000_000),
            (-8,   -(2 ** (-8)),    0b1_00111_0000000000,  0b1_0111_000),
            (-9,   -(2 ** (-9)),    0b1_00110_0000000000,  0b1_0110_000),
            (-10,  -(2 ** (-10)),   0b1_00101_0000000000,  0b1_0101_000),
            (-11,  -(2 ** (-11)),   0b1_00100_0000000000,  0b1_0100_000),
            (-12,  -(2 ** (-12)),   0b1_00011_0000000000,  0b1_0011_000),
            (-13,  -(2 ** (-13)),   0b1_00010_0000000000,  0b1_0010_000),
            (-14,  -(2 ** (-14)),   0b1_00001_0000000000,  0b1_0001_000),
        ]
        
        for exp, x, fp16, hf8x in xs:
            xx = torch.tensor([x], dtype=torch.float16)
            
            self.assertEqual(xx[0].item(), x)
            self.assertEqual(xx[0].view(dtype=torch.int16).item() & 0xffff, fp16)
            
            hf = to_hf8x(xx)
            
            self.assertEqual(hf.shape, (1,))
            self.assertEqual(hf.view(dtype=torch.uint8).item(), hf8x)
            

    def test_subnormal_fp16_subnormal_hf8x(self):
        xs = [
            # exp  value           fp16                  hf8x (expected)
            (-15, 2 ** (-15),      0b0_00000_1000000000, 0b0_000_0100),
            (-16, 2 ** (-16),      0b0_00000_0100000000, 0b0_000_0010),
            (-17, 2 ** (-17),      0b0_00000_0010000000, 0b0_000_0001),
            (-18, 2 ** (-18),      0b0_00000_0001000000, 0b0_000_0000),
            (-19, 2 ** (-19),      0b0_00000_0000100000, 0b0_000_0000),
            (-20, 2 ** (-20),      0b0_00000_0000010000, 0b0_000_0000),
            (-21, 2 ** (-21),      0b0_00000_0000001000, 0b0_000_0000),
            (-22, 2 ** (-22),      0b0_00000_0000000100, 0b0_000_0000),
            (-23, 2 ** (-23),      0b0_00000_0000000010, 0b0_000_0000),
            (-24, 2 ** (-24),      0b0_00000_0000000001, 0b0_000_0000),
            (-15, -(2 ** (-15)),   0b1_00000_1000000000, 0b1_000_0100),
            (-16, -(2 ** (-16)),   0b1_00000_0100000000, 0b1_000_0010),
            (-17, -(2 ** (-17)),   0b1_00000_0010000000, 0b1_000_0001),
            (-18, -(2 ** (-18)),   0b1_00000_0001000000, 0b1_000_0000),
            (-19, -(2 ** (-19)),   0b1_00000_0000100000, 0b1_000_0000),
            (-20, -(2 ** (-20)),   0b1_00000_0000010000, 0b1_000_0000),
            (-21, -(2 ** (-21)),   0b1_00000_0000001000, 0b1_000_0000),
            (-22, -(2 ** (-22)),   0b1_00000_0000000100, 0b1_000_0000),
            (-23, -(2 ** (-23)),   0b1_00000_0000000010, 0b1_000_0000),
            (-24, -(2 ** (-24)),   0b1_00000_0000000001, 0b1_000_0000),
        ]
        
        for exp, x, fp16, hf8x in xs:
            xx = torch.tensor([x], dtype=torch.float16)
            
            self.assertEqual(xx[0].item(), x)
            self.assertEqual(xx[0].view(dtype=torch.int16).item() & 0xffff, fp16)
            
            hf = to_hf8x(xx)
            
            self.assertEqual(hf.shape, (1,))
            self.assertEqual(hf.view(dtype=torch.uint8).item(), hf8x, [exp, x, f'{fp16:016b}', f'{hf8x:08b}', f'{hf.view(dtype=torch.uint8).item():08b}'])
    
    
    def test_hf8x_combine(self):
        xs = [
            # exp  value            fp16                   hf8x (expected)
            (0,    2 ** (0),        0b0_01111_0000000000,  0b0_1111_000),
            (-1,   2 ** (-1),       0b0_01110_0000000000,  0b0_1110_000),
            (-2,   2 ** (-2),       0b0_01101_0000000000,  0b0_1101_000),
            (-3,   2 ** (-3),       0b0_01100_0000000000,  0b0_1100_000),
            (-4,   2 ** (-4),       0b0_01011_0000000000,  0b0_1011_000),
            (-5,   2 ** (-5),       0b0_01010_0000000000,  0b0_1010_000),
            (-6,   2 ** (-6),       0b0_01001_0000000000,  0b0_1001_000),
            (-7,   2 ** (-7),       0b0_01000_0000000000,  0b0_1000_000),
            (-8,   2 ** (-8),       0b0_00111_0000000000,  0b0_0111_000),
            (-9,   2 ** (-9),       0b0_00110_0000000000,  0b0_0110_000),
            (-10,  2 ** (-10),      0b0_00101_0000000000,  0b0_0101_000),
            (-11,  2 ** (-11),      0b0_00100_0000000000,  0b0_0100_000),
            (-12,  2 ** (-12),      0b0_00011_0000000000,  0b0_0011_000),
            (-13,  2 ** (-13),      0b0_00010_0000000000,  0b0_0010_000),
            (-14,  2 ** (-14),      0b0_00001_0000000000,  0b0_0001_000),
            (0,    -(2 ** (0)),     0b1_01111_0000000000,  0b1_1111_000),
            (-1,   -(2 ** (-1)),    0b1_01110_0000000000,  0b1_1110_000),
            (-2,   -(2 ** (-2)),    0b1_01101_0000000000,  0b1_1101_000),
            (-3,   -(2 ** (-3)),    0b1_01100_0000000000,  0b1_1100_000),
            (-4,   -(2 ** (-4)),    0b1_01011_0000000000,  0b1_1011_000),
            (-5,   -(2 ** (-5)),    0b1_01010_0000000000,  0b1_1010_000),
            (-6,   -(2 ** (-6)),    0b1_01001_0000000000,  0b1_1001_000),
            (-7,   -(2 ** (-7)),    0b1_01000_0000000000,  0b1_1000_000),
            (-8,   -(2 ** (-8)),    0b1_00111_0000000000,  0b1_0111_000),
            (-9,   -(2 ** (-9)),    0b1_00110_0000000000,  0b1_0110_000),
            (-10,  -(2 ** (-10)),   0b1_00101_0000000000,  0b1_0101_000),
            (-11,  -(2 ** (-11)),   0b1_00100_0000000000,  0b1_0100_000),
            (-12,  -(2 ** (-12)),   0b1_00011_0000000000,  0b1_0011_000),
            (-13,  -(2 ** (-13)),   0b1_00010_0000000000,  0b1_0010_000),
            (-14,  -(2 ** (-14)),   0b1_00001_0000000000,  0b1_0001_000),
        ]
        
        fs = [
            # value        fp16            hf8x (expected)
            (1.5,          0b10_0000_0000, 0b100),
            (1.25,         0b01_0000_0000, 0b010),
            (1.125,        0b00_1000_0000, 0b001),
        ]
        
        for exp, x0, fp16_e, hf8x_e in xs:
            for x1, fp16_f, hf8x_f in fs:
                x = x0 * x1
                
                xx = torch.tensor([x], dtype=torch.float16)
                
                self.assertEqual(xx[0].item(), x)
                self.assertEqual(xx[0].view(dtype=torch.int16).item() & 0xffff, fp16_e | fp16_f, [exp, x0, x1, fp16_e, fp16_f])
        
                hf = to_hf8x(xx)
                
                self.assertEqual(hf.shape, (1,))
                self.assertEqual(hf.view(dtype=torch.uint8).item(), hf8x_e | hf8x_f)
    

class TestToFp16(unittest.TestCase):
    
    def test_hf8x(self):
        es = [
            # exp  value            fp16                   hf8x (expected)
            (0,    2 ** (0),        0b0_01111_0000000000,  0b0_1111_000),
            (-1,   2 ** (-1),       0b0_01110_0000000000,  0b0_1110_000),
            (-2,   2 ** (-2),       0b0_01101_0000000000,  0b0_1101_000),
            (-3,   2 ** (-3),       0b0_01100_0000000000,  0b0_1100_000),
            (-4,   2 ** (-4),       0b0_01011_0000000000,  0b0_1011_000),
            (-5,   2 ** (-5),       0b0_01010_0000000000,  0b0_1010_000),
            (-6,   2 ** (-6),       0b0_01001_0000000000,  0b0_1001_000),
            (-7,   2 ** (-7),       0b0_01000_0000000000,  0b0_1000_000),
            (-8,   2 ** (-8),       0b0_00111_0000000000,  0b0_0111_000),
            (-9,   2 ** (-9),       0b0_00110_0000000000,  0b0_0110_000),
            (-10,  2 ** (-10),      0b0_00101_0000000000,  0b0_0101_000),
            (-11,  2 ** (-11),      0b0_00100_0000000000,  0b0_0100_000),
            (-12,  2 ** (-12),      0b0_00011_0000000000,  0b0_0011_000),
            (-13,  2 ** (-13),      0b0_00010_0000000000,  0b0_0010_000),
            (-14,  2 ** (-14),      0b0_00001_0000000000,  0b0_0001_000),
            (0,    -(2 ** (0)),     0b1_01111_0000000000,  0b1_1111_000),
            (-1,   -(2 ** (-1)),    0b1_01110_0000000000,  0b1_1110_000),
            (-2,   -(2 ** (-2)),    0b1_01101_0000000000,  0b1_1101_000),
            (-3,   -(2 ** (-3)),    0b1_01100_0000000000,  0b1_1100_000),
            (-4,   -(2 ** (-4)),    0b1_01011_0000000000,  0b1_1011_000),
            (-5,   -(2 ** (-5)),    0b1_01010_0000000000,  0b1_1010_000),
            (-6,   -(2 ** (-6)),    0b1_01001_0000000000,  0b1_1001_000),
            (-7,   -(2 ** (-7)),    0b1_01000_0000000000,  0b1_1000_000),
            (-8,   -(2 ** (-8)),    0b1_00111_0000000000,  0b1_0111_000),
            (-9,   -(2 ** (-9)),    0b1_00110_0000000000,  0b1_0110_000),
            (-10,  -(2 ** (-10)),   0b1_00101_0000000000,  0b1_0101_000),
            (-11,  -(2 ** (-11)),   0b1_00100_0000000000,  0b1_0100_000),
            (-12,  -(2 ** (-12)),   0b1_00011_0000000000,  0b1_0011_000),
            (-13,  -(2 ** (-13)),   0b1_00010_0000000000,  0b1_0010_000),
            (-14,  -(2 ** (-14)),   0b1_00001_0000000000,  0b1_0001_000),
        ]
        
        for exp, x, fp16_e, hf8x_e in es:
            x = torch.tensor([hf8x_e], dtype=torch.uint8)
            xs = hf8x_to_fp16(x)
            
            self.assertEqual(xs.shape, (1,))
            
            x = xs[0].view(dtype=torch.int16).item() & 0xffff
            
            self.assertEqual(x, fp16_e, [exp, f'{x:08b}', f'{fp16_e:016b}', f'{hf8x_e:08b}'])
        
        for exp, x, fp16_e, hf8x_e in es:
            for hf8x_f in range(1 << 3):
                fp16_f = hf8x_f << 7
        
                x = torch.tensor([hf8x_e | hf8x_f], dtype=torch.uint8)
                xs = hf8x_to_fp16(x)
                
                self.assertEqual(xs.shape, (1,))
                
                x = xs[0].view(dtype=torch.int16).item() & 0xffff
                
                self.assertEqual(x, fp16_e | fp16_f)
            
            
    def test_subnormal_hf8x_normal_fp16(self):
        pass
    
    def test_subnormal_hf8x_subnormal_fp16(self):
        pass


def test_rand(n=1024, seed=1):
    import random
    
    if 0 <= seed:
        random.seed(seed)
    
    i = 0
    while i < n:
        s = random.randint(0, 1)
        e = random.randint(-11, -1) + 15
        f = random.randint(0, 0b0000_0011_1111_1111)
        
        x = (e << 10) | f
        
        if HF8X_MAX <= as_fp16(x):
            continue
        
        xx = torch.tensor([x], dtype=torch.int16).view(dtype=torch.float16)
        if s == 1:
            xx = -xx
            x = (s << 15) | x
        
        hf = to_hf8x(xx)
        
        yy = hf8x_to_fp16(hf)
        
        assert yy.shape == (1,)
        
        y = yy[0].view(dtype=torch.int16).item() & 0xffff
        
        xf, yf = numpy.array([x, y], dtype=numpy.uint16).view(numpy.float16)
        d = 1 << 7
        assert abs(x - y) < d, f'{yf-xf}   x={xf} ({x} {x:016b}), y={yf} ({y} {y:016b}), s={s}, e={e-15} ({e:05b}), f={f:010b}'
        
        i += 1


if __name__ == '__main__':
    unittest.main()
    #test_rand(1024 * 10)
